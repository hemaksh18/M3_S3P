#include <stdio.h>
    #include <stdlib.h>
    #include <CL/cl.h> 
    #include <chrono> 
    
    #define PRINT 1
    
    int SZ = 10000;
    
    int *v1, *v2, *v_out;
    
    cl_mem bufV1, bufV2, bufV_out; //  buffer objects that manage memory
    
    // device ID, context, program, kernel, queue, event object are created as in OpenCL
    cl_device_id device_id; 
    cl_context context; 
    cl_program program; 
    cl_kernel kernel; 
    cl_command_queue queue; 
    cl_event event = NULL; 
    
    int err; 
    
    // OpenCL device is created 
    cl_device_id create_device();
    
    // OpenCL device, context, queue, and kernel are setup
    void setup_openCL_device_context_queue_kernel(char *filename, char *kernelname);
    
    // building OpneCL program
    cl_program build_program(cl_context ctx, cl_device_id dev, const char *filename);
    
    // memory buffer is set 
    void setup_kernel_memory();
    
    // kernel arguments are copied in this function
    void copy_kernel_args();
    
    // freeing memory of allocated abjects
    void free_memory();
    
    // initialising array with random values
    void init(int *&A, int size);
    
    
    void print(int *A, int size);
    
    int main(int argc, char **argv) {
        if (argc > 1) {
            SZ = atoi(argv[1]);
        }
    
        // Allocating memory for arrays
        init(v1, SZ);
        init(v2, SZ);
        init(v_out, SZ); 
    
        size_t global[1] = {(size_t)SZ}; 
    
        
        print(v1, SZ);
        print(v2, SZ);
       
        //  function that sets up OpenCL device,queue, context and kernel
        setup_openCL_device_context_queue_kernel((char *)"./program.cl", (char *)"vector_add_ocl");
        setup_kernel_memory();
        copy_kernel_args();
        
        auto start = std::chrono::high_resolution_clock::now();
    
        clEnqueueNDRangeKernel(queue, kernel, 1, NULL, global, NULL, 0, NULL, &event);
        clWaitForEvents(1, &event); // function that makes kernel wait before other kernel execute
        // reading output from kernel buffer
        clEnqueueReadBuffer(queue, bufV_out, CL_TRUE, 0, SZ * sizeof(int), &v_out[0], 0, NULL, NULL);
    
        print(v_out, SZ);
    
        auto stop = std::chrono::high_resolution_clock::now(); 
        std::chrono::duration<double, std::milli> elapsed_time = stop - start; 
        printf("Kernel Execution Time: %f ms\n", elapsed_time.count());
    
        
        free_memory();
    }
    
    
    void init(int *&A, int size) {
        A = (int *)malloc(sizeof(int) * size);
    
        for (long i = 0; i < size; i++) {
            A[i] = rand() % 100; 
        }
    }
    
    
    void print(int *A, int size)
    {
        if (PRINT == 0)
        {
            return;
        }
    
        if (PRINT == 1 && size > 15)
        {
            for (long i = 0; i < 5; i++)
            {                      
                printf("%d ", A[i]);         }
            printf(" ..... ");
            for (long i = size - 5; i < size; i++)
            {                        
                printf("%d ", A[i]); 
            }
        }
        else
        {
            for (long i = 0; i < size; i++)
            {                        
                printf("%d ", A[i]); 
            }
        }
        printf("\n----------------------------\n");
    }
    
    // Function to free allocated memory
    void free_memory() {
        clReleaseMemObject(bufV1);
        clReleaseMemObject(bufV2);
        clReleaseMemObject(bufV_out);
    
        clReleaseKernel(kernel);
        clReleaseCommandQueue(queue);
        clReleaseProgram(program);
        clReleaseContext(context);
    
        free(v1);
        free(v2);
        free(v_out); 
    }
    
    //  copying kernel arguments
    void copy_kernel_args()
    {
        // Set kernel arguments
        clSetKernelArg(kernel, 0, sizeof(int), (void *)&SZ);
        clSetKernelArg(kernel, 1, sizeof(cl_mem), (void *)&bufV1);
        clSetKernelArg(kernel, 2, sizeof(cl_mem), (void *)&bufV2);
        clSetKernelArg(kernel, 3, sizeof(cl_mem), (void *)&bufV_out);
    
        if (err < 0)
        {
            perror("Couldn't create a kernel argument");
            printf("error = %d", err);
            exit(1);
        }
    }
    
    // funcions sets kernel memory buffers
    void setup_kernel_memory() {
        
        bufV1 = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);
        bufV2 = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);
        bufV_out = clCreateBuffer(context, CL_MEM_READ_WRITE, SZ * sizeof(int), NULL, NULL);
    
        clEnqueueWriteBuffer(queue, bufV1, CL_TRUE, 0, SZ * sizeof(int), &v1[0], 0, NULL, NULL);
        clEnqueueWriteBuffer(queue, bufV2, CL_TRUE, 0, SZ * sizeof(int), &v2[0], 0, NULL, NULL);
    }
    
    
    
